#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17020
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Demo.WindowsPresentation
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DataSource")]
	public partial class DataBaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPolygon(Polygon instance);
    partial void UpdatePolygon(Polygon instance);
    partial void DeletePolygon(Polygon instance);
    partial void InsertLayer(Layer instance);
    partial void UpdateLayer(Layer instance);
    partial void DeleteLayer(Layer instance);
    partial void InsertMarker(Marker instance);
    partial void UpdateMarker(Marker instance);
    partial void DeleteMarker(Marker instance);
    #endregion
		
		public DataBaseDataContext() : 
				base(global::Demo.WindowsPresentation.Properties.Settings.Default.DataSourceConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Polygon> Polygons
		{
			get
			{
				return this.GetTable<Polygon>();
			}
		}
		
		public System.Data.Linq.Table<Layer> Layers
		{
			get
			{
				return this.GetTable<Layer>();
			}
		}
		
		public System.Data.Linq.Table<Marker> Markers
		{
			get
			{
				return this.GetTable<Marker>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Polygons")]
	public partial class Polygon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PolygonID;
		
		private double _Lat;
		
		private double _Lng;
		
		private string _MarkerID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPolygonIDChanging(System.Guid value);
    partial void OnPolygonIDChanged();
    partial void OnLatChanging(double value);
    partial void OnLatChanged();
    partial void OnLngChanging(double value);
    partial void OnLngChanged();
    partial void OnMarkerIDChanging(string value);
    partial void OnMarkerIDChanged();
    #endregion
		
		public Polygon()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolygonID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PolygonID
		{
			get
			{
				return this._PolygonID;
			}
			set
			{
				if ((this._PolygonID != value))
				{
					this.OnPolygonIDChanging(value);
					this.SendPropertyChanging();
					this._PolygonID = value;
					this.SendPropertyChanged("PolygonID");
					this.OnPolygonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lat", DbType="Float NOT NULL")]
		public double Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lng", DbType="Float NOT NULL")]
		public double Lng
		{
			get
			{
				return this._Lng;
			}
			set
			{
				if ((this._Lng != value))
				{
					this.OnLngChanging(value);
					this.SendPropertyChanging();
					this._Lng = value;
					this.SendPropertyChanged("Lng");
					this.OnLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkerID", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string MarkerID
		{
			get
			{
				return this._MarkerID;
			}
			set
			{
				if ((this._MarkerID != value))
				{
					this.OnMarkerIDChanging(value);
					this.SendPropertyChanging();
					this._MarkerID = value;
					this.SendPropertyChanged("MarkerID");
					this.OnMarkerIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Layers")]
	public partial class Layer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<bool> _IsLayerShown;
		
		private string _LayerName;
		
		private System.Guid _LayerID;
		
		private string _LayerColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIsLayerShownChanging(System.Nullable<bool> value);
    partial void OnIsLayerShownChanged();
    partial void OnLayerNameChanging(string value);
    partial void OnLayerNameChanged();
    partial void OnLayerIDChanging(System.Guid value);
    partial void OnLayerIDChanged();
    partial void OnLayerColorChanging(string value);
    partial void OnLayerColorChanged();
    #endregion
		
		public Layer()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLayerShown", DbType="Bit")]
		public System.Nullable<bool> IsLayerShown
		{
			get
			{
				return this._IsLayerShown;
			}
			set
			{
				if ((this._IsLayerShown != value))
				{
					this.OnIsLayerShownChanging(value);
					this.SendPropertyChanging();
					this._IsLayerShown = value;
					this.SendPropertyChanged("IsLayerShown");
					this.OnIsLayerShownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LayerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LayerName
		{
			get
			{
				return this._LayerName;
			}
			set
			{
				if ((this._LayerName != value))
				{
					this.OnLayerNameChanging(value);
					this.SendPropertyChanging();
					this._LayerName = value;
					this.SendPropertyChanged("LayerName");
					this.OnLayerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LayerID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LayerID
		{
			get
			{
				return this._LayerID;
			}
			set
			{
				if ((this._LayerID != value))
				{
					this.OnLayerIDChanging(value);
					this.SendPropertyChanging();
					this._LayerID = value;
					this.SendPropertyChanged("LayerID");
					this.OnLayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LayerColor", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LayerColor
		{
			get
			{
				return this._LayerColor;
			}
			set
			{
				if ((this._LayerColor != value))
				{
					this.OnLayerColorChanging(value);
					this.SendPropertyChanging();
					this._LayerColor = value;
					this.SendPropertyChanged("LayerColor");
					this.OnLayerColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Markers")]
	public partial class Marker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MarkerName;
		
		private double _MarkerLat;
		
		private double _MarkerLng;
		
		private string _MarkerNote;
		
		private string _MarkerGEO;
		
		private System.Guid _MarkerID;
		
		private string _LayerID;
		
		private System.Nullable<int> _MarkerType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMarkerNameChanging(string value);
    partial void OnMarkerNameChanged();
    partial void OnMarkerLatChanging(double value);
    partial void OnMarkerLatChanged();
    partial void OnMarkerLngChanging(double value);
    partial void OnMarkerLngChanged();
    partial void OnMarkerNoteChanging(string value);
    partial void OnMarkerNoteChanged();
    partial void OnMarkerGEOChanging(string value);
    partial void OnMarkerGEOChanged();
    partial void OnMarkerIDChanging(System.Guid value);
    partial void OnMarkerIDChanged();
    partial void OnLayerIDChanging(string value);
    partial void OnLayerIDChanged();
    partial void OnMarkerTypeChanging(System.Nullable<int> value);
    partial void OnMarkerTypeChanged();
    #endregion
		
		public Marker()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MarkerName
		{
			get
			{
				return this._MarkerName;
			}
			set
			{
				if ((this._MarkerName != value))
				{
					this.OnMarkerNameChanging(value);
					this.SendPropertyChanging();
					this._MarkerName = value;
					this.SendPropertyChanged("MarkerName");
					this.OnMarkerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkerLat", DbType="Float NOT NULL")]
		public double MarkerLat
		{
			get
			{
				return this._MarkerLat;
			}
			set
			{
				if ((this._MarkerLat != value))
				{
					this.OnMarkerLatChanging(value);
					this.SendPropertyChanging();
					this._MarkerLat = value;
					this.SendPropertyChanged("MarkerLat");
					this.OnMarkerLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkerLng", DbType="Float NOT NULL")]
		public double MarkerLng
		{
			get
			{
				return this._MarkerLng;
			}
			set
			{
				if ((this._MarkerLng != value))
				{
					this.OnMarkerLngChanging(value);
					this.SendPropertyChanging();
					this._MarkerLng = value;
					this.SendPropertyChanged("MarkerLng");
					this.OnMarkerLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkerNote", DbType="NVarChar(MAX)")]
		public string MarkerNote
		{
			get
			{
				return this._MarkerNote;
			}
			set
			{
				if ((this._MarkerNote != value))
				{
					this.OnMarkerNoteChanging(value);
					this.SendPropertyChanging();
					this._MarkerNote = value;
					this.SendPropertyChanged("MarkerNote");
					this.OnMarkerNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkerGEO", DbType="NVarChar(MAX)")]
		public string MarkerGEO
		{
			get
			{
				return this._MarkerGEO;
			}
			set
			{
				if ((this._MarkerGEO != value))
				{
					this.OnMarkerGEOChanging(value);
					this.SendPropertyChanging();
					this._MarkerGEO = value;
					this.SendPropertyChanged("MarkerGEO");
					this.OnMarkerGEOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkerID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MarkerID
		{
			get
			{
				return this._MarkerID;
			}
			set
			{
				if ((this._MarkerID != value))
				{
					this.OnMarkerIDChanging(value);
					this.SendPropertyChanging();
					this._MarkerID = value;
					this.SendPropertyChanged("MarkerID");
					this.OnMarkerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LayerID", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string LayerID
		{
			get
			{
				return this._LayerID;
			}
			set
			{
				if ((this._LayerID != value))
				{
					this.OnLayerIDChanging(value);
					this.SendPropertyChanging();
					this._LayerID = value;
					this.SendPropertyChanged("LayerID");
					this.OnLayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkerType", DbType="Int")]
		public System.Nullable<int> MarkerType
		{
			get
			{
				return this._MarkerType;
			}
			set
			{
				if ((this._MarkerType != value))
				{
					this.OnMarkerTypeChanging(value);
					this.SendPropertyChanging();
					this._MarkerType = value;
					this.SendPropertyChanged("MarkerType");
					this.OnMarkerTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
